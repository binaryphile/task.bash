#!/usr/bin/env bash

main() {
  set -euo pipefail                   # enable strict mode
  register systemTypeFunc idSystem    # identify debian and crostini
  register hostnameFunc idHost        # identify crostini alternative hostname

  system debian
    section system
    t.apt_upgrade
  endsystem

  crostiniDir=/mnt/chromeos/MyFiles/Downloads/crostini

  system crostini
    # copy non-passphrased key if it exists and there isn't already a key
    if [[ -e $crostiniDir/np_id_ed25519.pub ]]; then
      section credential
      t.install 600 $crostiniDir/np_id_ed25519 ~/.ssh/id_ed25519
      t.install 644 $crostiniDir/np_id_ed25519.pub ~/.ssh/id_ed25519.pub
    # copy unique key if it exists and there isn't already a key
    elif [[ -e $crostiniDir/id_ed25519.pub ]]; then
      section credential
      t.install 600 $crostiniDir/id_ed25519 ~/.ssh/id_ed25519
      t.install 644 $crostiniDir/id_ed25519.pub ~/.ssh/id_ed25519.pub
    fi
  endsystem

  section dotfiles
  t.git_clone git@github.com:binaryphile/dotfiles ~/dotfiles
  system macos
    t.ln contexts/macos ~/dotfiles/context
  system crostini
    t.ln contexts/crostini ~/dotfiles/context
  endsystem

  section nix
  t.curlpipe_lix_installer
  unstrictly source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
  t.ln ~/dotfiles/config.nix ~/.config/nixpkgs/config.nix

  section home-manager
  t.nix-channel_add_home-manager
  t.nix-channel_update
  t.nix-shell_home-manager_install
  unstrictly source ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  t.ln ~/dotfiles/home.nix ~/.config/home-manager/home.nix
  t.home-manager_switch

  system crostini
    section crostini
    t.ln $crostiniDir ~/crostini

    # link to permanent project directories from home dir
    stream $crostiniDir/projects/* $crostiniDir/GolandProjects/* $crostiniDir/obsidian/* |
      each glob |
      map target '$target ~/${target#$crostiniDir/}' |
      each t.ln
  endsystem

  section mk.bash
  t.git_clone git@github.com:binaryphile/mk.bash ~/projects/mk.bash
  t.git_checkout develop ~/projects/mk.bash
  t.ln ~/projects/mk.bash/mk.bash ~/.local/lib/mk.bash
  t.ln ~/projects/mk.bash/mk-example ~/.local/bin/mk

  section neovim
  t.git_clone git@github.com:binaryphile/dot_vim ~/.config/nvim
  t.curl https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim ~/.local/share/nvim/site/autoload/plug.vim
  t.nvim_headless_PlugInstall
  t.ln ~/.config/nvim ~/nvim

  section task.bash
  t.git_clone git@github.com:binaryphile/task.bash ~/projects/task.bash
  t.git_checkout develop ~/projects/task.bash

  section tesht
  t.git_clone git@github.com:binaryphile/tesht ~/projects/tesht
  t.git_checkout develop ~/projects/tesht
  t.ln ~/projects/tesht/tesht ~/.local/bin/tesht

  section apps
  t.git_clone git@bitbucket.org:accelecon/tlilley-daily-notes ~/obsidian/tlilley-daily-notes
  each t.ln <<'  END'
    ~/.config                                 ~/config
    ~/.local                                  ~/local
    ~/.ssh                                    ~/ssh
    ~/dotfiles/bash/init.bash                 ~/.bash_profile
    ~/dotfiles/bash/init.bash                 ~/.bashrc
    ~/dotfiles/bash/init.bash                 ~/.profile
    ~/dotfiles/gitconfig                      ~/.gitconfig
    ~/dotfiles/liquidprompt/liquid.theme      ~/.config/liquidprompt/liquid.theme
    ~/dotfiles/liquidprompt/liquidpromptrc    ~/.config/liquidpromptrc
    ~/dotfiles/ranger/rc.conf                 ~/.config/ranger/rc.conf
    ~/dotfiles/ranger/rifle.conf              ~/.config/ranger/rifle.conf
    ~/dotfiles/ssh/config                     ~/.ssh/config
    ~/dotfiles/tmux.conf                      ~/.tmux.conf
  END

  system crostini
    section unique credential
    [[ -e $crostiniDir/np_id_ed25519.pub ]] && {
      t.remove_matching_file ~/.ssh/id_ed25519.pub $crostiniDir/np_id_ed25519.pub
      t.remove_matching_file ~/.ssh/id_ed25519 $crostiniDir/np_id_ed25519
      rm $crostiniDir/np_id_ed25519{,.pub}
    }
    t.ssh_keygen $crostiniDir/id_ed25519
    t.install 600 $crostiniDir/id_ed25519 ~/.ssh/id_ed25519
    t.install 644 $crostiniDir/id_ed25519.pub ~/.ssh/id_ed25519.pub
  endsystem

  stream ~/obsidian/* ~/projects/* ~/.config/nvim ~/dotfiles |
    each glob |
    collect |
    each 't.mk git-update'
}

## helpers

idHost() {
  local filename=/mnt/chromeos/MyFiles/Downloads/crostini/hostname hostname
  [[ $HOSTNAME == penguin && -e $filename ]] && hostname=$(<$filename) || hostname=$HOSTNAME
  echo ${hostname,,}
}

idSystem() {
  [[ $OSTYPE == darwin* ]] && { echo macos; return; }
  echo linux
  [[ $HOSTNAME != penguin ]] || { echo debian; echo crostini; }
}

## task definitions

# system

# t.apt_upgrade upgrades all apt packages to latest.
# It first does an apt update.
t.apt_upgrade() {
  task   'apt update'
  become root
  unchg  'All packages are up to date.'
  def    'apt update'

  task   'apt upgrade'
  prog   on
  become root
  unchg  '0 upgraded, 0 newly installed'
  def    'apt upgrade -y'
}

# mk
t.mk() {
  local args
  printf -v args '%q ' $*
  task "mk $args"
  prog on
  def  "mk $args"
}

# nix
t.curlpipe_lix_installer() {
  task   'install single-user nix'
  prog   on
  exist  /nix/var/nix/profiles/default/bin/nix-env
  def    'curl -sSf -L https://install.lix.systems/lix | sh -s -- install linux --no-confirm --init none'

  [[ $OSTYPE == darwin* ]] && local flag=f || local flag=c
  task    'change store ownership to single user'
  become  root
  ok      "[[ \$(stat -$flag %u /nix):\$(stat -$flag %g /nix) == $(id -u):$(id -g) ]]"
  def     "chown -R $(id -u):$(id -g) /nix"
}

# home manager

t.nix-channel_add_home-manager() {
  task   'add home manager channel'
  exist  ~/.nix-channels
  def    'nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager'
}

t.nix-channel_update() {
  task   'update nix channels'
  prog   on
  exist  ~/.nix-defexpr/channels/home-manager
  def    'nix-channel --update'
}

t.nix-shell_home-manager_install() {
  task   'install home manager'
  prog   on
  exist  ~/.config/home-manager
  def    "nix-shell '<home-manager>' -A install"
}

t.home-manager_switch() {
  task  'apply home manager configuration'
  prog  on
  unchg 'No change so reusing latest profile generation'
  def   'home-manager switch'
}

# neovim
t.nvim_headless_PlugInstall() {
  task  'install neovim plugins'
  exist ~/.local/share/nvim/plugged
  def   'nvim --headless +PlugInstall +qall'
}

# credential

t.install() {
  local mode=$1 src=$2 dst=$3
  task  "copy $src to $dst with mode $mode"
  exist $dst
  def   "mkdir -p $(dirname $dst); install -m $mode $src $dst"
}

t.remove_matching_file() {
  local targetFilename=$1 matchFilename=$2
  task  "remove file $targetFilename if it matches $matchFilename"
  ok    "[[ -e $matchFilename ]] && ! [[ -e $targetFilename ]] || [[ $(<$targetFilename) != $(<$matchFilename) ]]"
  def   "if [[
            -e $matchFilename && -e $targetFilename &&
            \$(<$targetFilename) == \$(<$matchFilename)
          ]]; then
            rm $targetFilename
          fi"
}

t.ssh_keygen() {
  local keyFilename=$1
  task  'generate an ssh key'
  prog  on
  ok    "[[ -e $keyFilename ]]"
  def   "
    read -sp 'generating ssh key.  passphrase: ' passphrase
    read -sp $'\nagain: ' passphrase2
    [[ \$passphrase == \$passphrase2 ]] || { echo -e '\npassphrase did not match'; exit 1; }
    echo
    ssh-keygen -t ed25519 -f $keyFilename -N \"\$passphrase\" -C $USER@$(idHost)
    cat $keyFilename.pub
  "
}

## boilerplate

here=$(cd "$(dirname "$BASH_SOURCE")"; cd -P "$(dirname "$(readlink "$BASH_SOURCE" || echo .)")"; pwd)
if [[ -e "$here"/task.bash ]]; then
  source "$here"/task.bash
else
  lib=$(curl -fsSL https://raw.githubusercontent.com/binaryphile/task.bash/main/task.bash) || exit
  eval "$lib"
fi
unset -v here lib

return 2>/dev/null  # stop here if sourced, for interactive debugging

# parse options
while [[ ${1:-} == -?* ]]; do
  case $1 in
    -h|--help )   [[ -v Usage ]] && echo "$Usage"; exit;;

    -x|--trace )  set -x;;

    -s|--short )  setShortRun;;

    -- ) shift; break;;
  esac
  shift
done

main
summarize
