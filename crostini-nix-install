#!/usr/bin/env bash

main() {
  section system
  echo_5_motd
  apt_upgrade_y

  section credential
  my.install /mnt/chromeos/MyFiles/Downloads/crostini/id_rsa $HOME/.ssh/id_rsa

  section dotfiles
  task.gitclone git@github.com:binaryphile/dotfiles $HOME/dotfiles
  task.ln contexts/work/crostini-bullseye $HOME/dotfiles/context

  section ssh
  task.ln $HOME/dotfiles/ssh/config $HOME/.ssh/config

  section nix
  curlpipe_lix_install
  task.ln $HOME/dotfiles/config.nix $HOME/.config/nixpkgs/config.nix

  section home-manager
  nix_channel_add_home_manager
  nix_channel_update
  nix_shell_home_manager_install
  task.ln $HOME/dotfiles/home.nix $HOME/.config/home-manager/home.nix
  home_manager_switch

  section apps
  task.ln <<'  END'
    $HOME/dotfiles/bash/init.bash                           $HOME/.bashrc
    $HOME/dotfiles/bash/init.bash                           $HOME/.bash_profile
    $HOME/dotfiles/bash/init.bash                           $HOME/.profile
    $HOME/dotfiles/gitconfig                                $HOME/.gitconfig
    $HOME/dotfiles/liquidprompt/liquid.theme                $HOME/.config/liquidprompt/liquid.theme
    $HOME/dotfiles/liquidprompt/liquidpromptrc              $HOME/.config/liquidpromptrc
    $HOME/dotfiles/ranger/rc.conf                           $HOME/.config/ranger/rc.conf
    $HOME/dotfiles/tmux.conf                                $HOME/.tmux.conf
    /mnt/chromeos/MyFiles/Downloads/crostini/GolandProjects $HOME/GolandProjects
  END
}

# system

echo_5_motd() {
  task 'turn off motd'
  ok   '[[ $(<$HOME/.local/share/cros-motd) == 5 ]]'
  def  'echo 5 >$HOME/.local/share/cros-motd'
}

apt_upgrade_y() {
  task   'apt update'
  become root
  unchg  'All packages are up to date.'
  def    apt update

  task   'apt upgrade'
  prog   on
  become root
  unchg  '0 upgraded, 0 newly installed'
  def    apt upgrade -y
}

# credential

my.install() {
  task  "install -m 600 $1 $2"
  exist $2
  def 	"mkdir -pm 700 $(dirname $2); install -m 600 $1 $2"
}

# nix

curlpipe_lix_install() {
  task   'install nix'
  prog   on
  exist  /nix/var/nix/profiles/default/bin/nix-env
  def    'curl -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm'

  source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
  PATH+=:$HOME/.nix-profile/bin
}

# home-manager

nix_channel_add_home_manager() {
  task   'add home-manager channel'
  exist  $HOME/.nix-channels
  def    nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
}

nix_channel_update() {
  task   'update nix channels'
  prog   on
  exist  $HOME/.nix-defexpr/channels/home-manager
  def    nix-channel --update
}

nix_shell_home_manager_install() {
  task   'install home-manager'
  prog   on
  exist  $HOME/.config/home-manager
  def    nix-shell '<home-manager>' -A install

  strict off
  source $HOME/.nix-profile/etc/profile.d/hm-session-vars.sh
  strict on
}

home_manager_switch() {
  task  'apply home manager configuration'
  prog  on
  unchg 'No change so reusing latest profile generation'
  ok 	'[[ $(home-manager switch) == *"No change so reusing latest profile generation"* ]]'
  def   home-manager switch
}

if [[ -e task.bash ]]; then
  source ./task.bash
else
  lib=$(curl -fsSL https://raw.githubusercontent.com/binaryphile/ansible/main/task.bash) || exit
  eval "$lib"
  unset -v lib
fi

return 2>/dev/null
set -e

[[ ${1:-} == -x ]] && { shift; set -x; }

main
summarize
