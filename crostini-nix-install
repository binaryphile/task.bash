#!/usr/bin/env bash

main() {
  section system
  section ssh
  section dotfiles
  section nix

  # apps
  section git
  section goland
  section init.bash
  section liquidprompt
  section neovim
  section ranger
  section tmux
}

system() {
  task: 'turn off motd'
  ok:   '[[ $(<$HOME/.local/share/cros-motd) == 5 ]]'
  def:  'echo 5 >$HOME/.local/share/cros-motd'

  task:   'apt update'
  become: root
  unchg:  'All packages are up to date.'
  def:    apt update

  task:   'apt upgrade'
  prog:   on
  become: root
  unchg:  '0 upgraded, 0 newly installed'
  def:    apt upgrade -y
}

ssh() {
  task: 'copy credentials'
  ok:   '[[ -e $HOME/.ssh/id_rsa ]]'
  def:  'mkdir -pm700 $HOME/.ssh; install -m600 /mnt/chromeos/MyFiles/Downloads/crostini/id_rsa $HOME/.ssh'

  task: 'create dotfile symlink'
  ok:   '[[ -e $HOME/.ssh/config ]]'
  def:  ln -sf $HOME/dotfiles/ssh/config $HOME/.ssh/config
}

dotfiles() {
  task: 'clone dotfiles repository'
  ok:   '[[ -e $HOME/dotfiles ]]'
  def:() {
    git clone https://github.com/binaryphile/dotfiles $HOME/dotfiles
    cd $HOME/dotfiles
    git remote set-url origin git@github.com:binaryphile/dotfiles
  }
  run

  task: 'link context directory'
  ok:   '[[ -e $HOME/dotfiles/context ]]'
  def:  ln -sfT contexts/work/crostini-bullseye $HOME/dotfiles/context
}

nix() {
  task: 'install nix'
  prog: on
  ok:   '[[ -e /nix/var/nix/profiles/default/bin/nix-env ]]'
  def:  'curl -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm'

  PATH+=:/nix/var/nix/profiles/default/bin

  task: 'add home manager channel'
  ok:   '[[ -e $HOME/.nix-channels ]]'
  def:  nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager

  task: 'update nix channels'
  prog: on
  ok:   '[[ -e $HOME/.nix-defexpr/channels/home-manager ]]'
  def:  nix-channel --update

  task: 'install home manager'
  prog: on
  ok:   '[[ -e $HOME/.config/home-manager ]]'
  def:  nix-shell '<home-manager>' -A install

  strict off  # next task re-enables strict
  source $HOME/.nix-profile/etc/profile.d/hm-session-vars.sh

  task: 'create config directory'
  ok:   '[[ -e $HOME/.config/nixpkgs ]]'
  def:  mkdir -pm755 $HOME/.config/nixpkgs

  task: 'create nix configuration symlinks'
  ok:   '[[ -e $HOME/.config/$path ]]'
  def:  'ln -sf $HOME/dotfiles/$src $HOME/.config/$path' <<'  END'
    [src]=home.nix    [path]=home-manager/home.nix
    [src]=config.nix  [path]=nixpkgs/config.nix
  END

  task:  'apply home manager configuration'
  prog:  on
  unchg: 'No change so reusing latest profile generation'
  def:   home-manager switch
}

git() {
  task: 'create dotfile symlink'
  ok:   '[[ -e $HOME/.gitconfig ]]'
  def:  ln -sf $HOME/dotfiles/gitconfig $HOME/.gitconfig
}

goland() {
  task: 'symlink projects'
  ok:   '[[ -e $HOME/GolandProjects ]]'
  def:  ln -sfT /mnt/chromeos/MyFiles/Downloads/crostini/GolandProjects $HOME/GolandProjects
}

init.bash() {
  task: 'create dotfile symlinks'
  ok:   '[[ -e $HOME/$path ]]'
  def:  'ln -sf $HOME/dotfiles/bash/init.bash $HOME/$1' <<'  END'
    .bash_profile
    .bashrc
    .profile
  END
}

liquidprompt() {
  task: 'create config directory'
  ok:   '[[ -e $HOME/.config/liquidprompt ]]'
  def:  mkdir -pm755 $HOME/.config/liquidprompt

  task: 'create dotfile symlinks'
  ok:   '[[ -e $HOME/$path ]]'
  def:  'ln -sf $HOME/dotfiles/liquidprompt/$src $HOME/.config/$path' <<'  END'
    [src]=liquid.theme    [path]=liquidprompt/liquid.theme
    [src]=liquidpromptrc  [path]=liquidpromptrc
  END
}

neovim() {
  task: 'clone vim configuration repository'
  ok:   '[[ -e $HOME/.config/nvim ]]'
  def:() {
    git clone https://github.com/binaryphile/dot_vim $HOME/.config/nvim
    cd $HOME/.config/nvim
    git remote set-url origin git@github.com:binaryphile/dot_vim
  }
  run

  task: 'install vim-plug plugin manager'
  ok:   '[[ -e $HOME/.local/share/nvim/site/autoload/plug.vim ]]'
  def:() {
    mkdir -pm755 $HOME/.local/share/nvim/site/autoload
    curl -fsSL https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim >$HOME/.local/share/nvim/site/autoload/plug.vim
  }
  run
}

ranger() {
  task: 'create config directory'
  ok:   '[[ -e $HOME/.config/ranger ]]'
  def:  mkdir -pm755 $HOME/.config/ranger

  task: 'create dotfile symlink'
  ok:   '[[ -e $HOME/.config/ranger/rc.conf ]]'
  def:  ln -sf $HOME/dotfiles/ranger/rc.conf $HOME/.config/ranger/rc.conf
}

tmux() {
  task: 'create dotfile symlink'
  ok:   '[[ -e $HOME/.tmux.conf ]]'
  def:  ln -sf $HOME/dotfiles/tmux.conf $HOME/.tmux.conf
}

if [[ -e task.bash ]]; then
  source ./task.bash
else
  lib=$(curl -fsSL https://raw.githubusercontent.com/binaryphile/ansible/main/task.bash) || exit
  eval "$lib"
  unset -v lib
fi

return 2>/dev/null
set -e

[[ ${1:-} == -x ]] && { shift; set -x; }

main
summarize
